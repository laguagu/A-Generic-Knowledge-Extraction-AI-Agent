"""
Auto-generated Extraction Prompt with Embedded Models
Generated by Knowledge Extraction Agent
This file contains a complete, self-contained extraction prompt system.
"""

EXTRACTION_PROMPT = """
TASK: Invoice

EXTRACTION TASK:
Extracting information from invoices

EMBEDDED PYDANTIC MODELS:
```python
```python
from pydantic import BaseModel, Field
from enum import Enum
from typing import Optional

class CarType(str, Enum):
    SEDAN = "sedan"
    HATCHBACK = "hatchback"
    COUPE = "Coupe"
    CONVERTIBLE = "Convertible (Cabriolet)"
    SUV = "SUV (Sport Utility Vehicle)"
    CROSSOVER = "Crossover (CUV)"
    STATION_WAGON = "Station Wagon (Estate)"
    PICKUP_TRUCK = "Pickup Truck"

class InvoiceInfo(BaseModel):
    name: str = Field(..., description="name of the recepient")
    address: str = Field(..., description="recepient's address")
    amount: str = Field(..., description="invoice amount")
    due_date: str = Field(..., description="the date on which the invoice is due.")
    bank_name: str = Field(..., description="Name of the bank")
    car_type: CarType = Field(..., description="type of the car")
```
```

CRITICAL EXTRACTION RULES:
1. ACCURACY & VERIFICATION:
   - Extract information ONLY from the provided text
   - Never fabricate, infer, or guess any information
   - Use 'n/a' for any fields where information is not explicitly stated
   - Verify all extracted data against the source text
   - Maintain exact values, dates, and numerical figures as written

2. DATA HANDLING:
   - For dates: Use DD-MM-YYYY format when possible
   - For numbers: Preserve original precision and units
   - For text: Maintain original spelling and capitalization
   - For lists: Extract all relevant items, remove duplicates
   - For enums: Choose ONLY from the specified options
   - For the extracted fields whose length exceeds 30 words, summarize their text into less than 30 words comprising very brief key phrases separated by semi-colon.

3. FIELD VALIDATION:
   - Enum fields must match one of the specified values exactly
   - List fields should contain valid, non-empty items
   - Numerical fields should be valid numbers in correct format

4. QUALITY ASSURANCE:
   - Double-check all extracted information against source
   - Ensure no information is duplicated across fields
   - Verify that field types match the expected data types
   - Confirm that all required fields are addressed
   - Validate that enum selections are from available options


OUTPUT FORMAT:
Return the extracted information as a JSON object that exactly matches the InvoiceInfo structure shown above.

CRITICAL: All JSON field names MUST be in snake_case format (lowercase with underscores) to match the model exactly.
For example: "due_date", "bank_name", "car_type" - NOT "Due date", "bank name", "car type"

Example output structure:
```json
{
  "field_name_1": "extracted_value_or_n/a",
  "field_name_2": ["list", "of", "values"],
  "field_name_3": "enum_option_or_n/a"
}
```

VALIDATION CHECKLIST:
Before returning your response, verify:
- All required fields are populated or marked 'n/a'
- All enum fields contain valid options only
- All numerical fields contain valid numbers
- All date fields follow proper format
- No information is fabricated or inferred
- JSON structure matches the model exactly
- Field names match the model exactly
- Data types are appropriate for each field

FINAL INSTRUCTIONS:
- Process the document systematically
- Extract information field by field as specified above
- Maintain accuracy over completeness
- When in doubt, use 'n/a' rather than guessing
- Return only the JSON object with extracted data
- Ensure the output can be parsed as valid JSON
"""

def get_extraction_prompt():
    """Return the complete extraction prompt with embedded models"""
    return EXTRACTION_PROMPT
