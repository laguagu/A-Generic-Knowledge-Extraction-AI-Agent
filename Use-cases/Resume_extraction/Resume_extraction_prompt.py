"""
Auto-generated Extraction Prompt with Embedded Models
Generated by Knowledge Extraction Agent
This file contains a complete, self-contained extraction prompt system.
"""

EXTRACTION_PROMPT = """
TASK: Resume extraction

CONTEXT:
Pydantic models for extracting structured information from resume. 

EMBEDDED PYDANTIC MODELS:
```python
from pydantic import BaseModel, Field, field_validator
from enum import Enum
from typing import List, Optional

class Industry(str, Enum):
    HEALTHCARE = "Healthcare & wellbeing"
    AUTOMOTIVE = "Automotive"
    CONSTRUCTION = "Construction"
    MANUFACTURING = "Manufacturing"
    CULTURAL = "Cultural & creative industries"
    DEFENSE = "Defense"
    EDUCATION = "Education & training"
    ENVIRONMENT = "Environment & sustainability"
    FINANCE = "Finance"
    LEGAL = "Legal"
    SECURITY = "Security"
    SMART_CITIES = "Smart cities"
    TRANSPORT = "Transport, mobility, logistics"
    TRAVEL = "Travel & tourism"
    BUSINESS_DEVELOPMENT_BUSINESS_SERVICES_REAL_ESTATE_PROPERTY = "Business development/business services, Real estate & property"
    ARTS = "Arts & entertainment"
    COMPUTER_SCIENCE = "Computer science"
    OTHER = "Other"

class Education(str, Enum):
    BACHELORS = "Bachelors"
    MASTERS = "Masters"
    PHD = "PhD"
    ASSOCIATE = "Associate"
    DIPLOMA = "Diploma"
    CERTIFICATION = "Certification"
    OTHER = "Other"

class Age(str, Enum):
    ABOVE_20 = "above 20"
    ABOVE_30 = "above 30"
    ABOVE_40 = "above 40"
    ABOVE_50 = "above 50"

class ResumeextractionInfo(BaseModel):
    name: str = Field(..., description='name of the person in resume')
    skills: str = Field(..., description="person's skillset")
    industry: Industry = Field(..., description="industry or domain the person belongs to. Choose ONE from:\n        - Healthcare & wellbeing: Medical, healthcare, wellness, fitness, health services, diagnostics, devices, mental health\n        - Automotive: Car manufacturers, parts suppliers, automotive software, autonomous vehicles\n        - Construction: Building construction, architecture, civil engineering, construction materials, planning\n        - Manufacturing: Physical goods production, industrial production, factories, automation\n        - Cultural & creative industries: Design, publishing, media production, art, cultural heritage, creative content\n        - Defense: Military, defense technologies, security forces, governmental defense\n        - Education & training: Educational services, training, e-learning platforms, educational content, academic tools\n        - Environment & sustainability: Environmental protection, sustainability, renewable energy, conservation, climate monitoring\n        - Finance: Banking, insurance, fintech, investment, accounting, financial services\n        - Legal: Legal services, legal tech, compliance tools, regulatory assistance\n        - Security: Cybersecurity, physical security, surveillance, identity verification, threat detection\n        - Smart cities: Urban infrastructure technologies, city planning, urban monitoring, smart city initiatives\n        - Transport, mobility, logistics: Transportation services, logistics, supply chain, shipping, freight, mobility\n        - Travel & tourism: Travel industry, tourism, hospitality, booking services, travel planning\n        - Business development/business services: B2B services, consulting, business optimization, productivity tools\n        - Real estate & property: Property management, real estate services, property development, facility management\n        - Arts & entertainment: Entertainment, media, gaming, arts, leisure sectors\nComputer science: information technology, computer systems engineering, artificial intelligence, data science, any other field related to computer science.\n        - Other: Companies that don't clearly fit into any of the above categories\n-")
    education: Education = Field(..., description="person's highest education. ")
    age: Age = Field(..., description='age of the person. If not specifically written, calculate from the date of birth (if available). Choose one from:\n')
```

CRITICAL EXTRACTION RULES:
1. ACCURACY & VERIFICATION:
   - Extract information ONLY from the provided text
   - Never fabricate, infer, or guess any information
   - Use 'n/a' for any fields where information is not explicitly stated
   - Verify all extracted data against the source text
   - Maintain exact values, dates, and numerical figures as written

2. DATA HANDLING:
   - For dates: Use ISO format (YYYY-MM-DD) when possible
   - For numbers: Preserve original precision and units
   - For text: Maintain original spelling and capitalization
   - For lists: Extract all relevant items, remove duplicates
   - For enums: Choose ONLY from the specified options

3. FIELD VALIDATION:
   - Required fields must be populated or marked as 'n/a'
   - Optional fields can be null/empty if not found
   - Enum fields must match one of the specified values exactly
   - List fields should contain valid, non-empty items
   - Numerical fields should be valid numbers in correct format

4. QUALITY ASSURANCE:
   - Double-check all extracted information against source
   - Ensure no information is duplicated across fields
   - Verify that field types match the expected data types
   - Confirm that all required fields are addressed
   - Validate that enum selections are from available options


OUTPUT FORMAT:
Return the extracted information as a JSON object that exactly matches the ResumeextractionInfo structure shown above.

Example output structure:
```json
{
  "field_name_1": "extracted_value_or_n/a",
  "field_name_2": ["list", "of", "values"],
  "field_name_3": "enum_option_or_n/a"
}
```

VALIDATION CHECKLIST:
Before returning your response, verify:
- All required fields are populated or marked 'n/a'
- All enum fields contain valid options only
- All numerical fields contain valid numbers
- All date fields follow proper format
- No information is fabricated or inferred
- JSON structure matches the model exactly
- Field names match the model exactly
- Data types are appropriate for each field

FINAL INSTRUCTIONS:
- Process the document systematically
- Extract information field by field as specified above
- Maintain accuracy over completeness
- When in doubt, use 'n/a' rather than guessing
- Return only the JSON object with extracted data
- Ensure the output can be parsed as valid JSON
"""

def get_extraction_prompt():
    """Return the complete extraction prompt with embedded models"""
    return EXTRACTION_PROMPT
